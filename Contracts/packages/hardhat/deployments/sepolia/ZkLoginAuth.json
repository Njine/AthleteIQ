{
  "address": "0xF332938727FA4bc2711bE0A1aA7AFDea4F1F75Af",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "user",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recoveredSigner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedVerifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "LoginAttempt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "user",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "LoginSuccess",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TIME_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "timestamps",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "proofHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "userAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyLogin",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa018cb6c4f9df2d9fc7d06c3072e5a7a7ea225e6aae75261a033be7c5aef01e1",
  "receipt": {
    "to": null,
    "from": "0xC27d4CcC62E64791c5B321C38E2aF647F091ddf5",
    "contractAddress": "0xF332938727FA4bc2711bE0A1aA7AFDea4F1F75Af",
    "transactionIndex": 77,
    "gasUsed": "497633",
    "logsBloom": "0x
    "blockHash": "0xd92c826f05fbb9283b9ce75159a487de9e9708708d11d567918d5910fca8605c",
    "transactionHash": "0xa018cb6c4f9df2d9fc7d06c3072e5a7a7ea225e6aae75261a033be7c5aef01e1",
    "logs": [],
    "blockNumber": 7958521,
    "cumulativeGasUsed": "16590753",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 21,
  "solcInputHash": "f0dfb2ef8101592b6cf669d2fb809cea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"user\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recoveredSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedVerifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LoginAttempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"user\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LoginSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TIME_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"timestamps\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"proofHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"userAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyLogin\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simplified contract for verifying user authentication via signatures\",\"kind\":\"dev\",\"methods\":{\"verifyLogin(string,string,string,bytes)\":{\"details\":\"Verify user authentication with pre-formatted message components\",\"params\":{\"proofHash\":\"Hash of the proof\",\"signature\":\"Signature produced by the trusted verifier\",\"timestamps\":\"Timestamp of the authentication attempt\",\"userAddress\":\"Address of the user attempting to log in\"},\"returns\":{\"_0\":\"True if authentication is successful\"}}},\"title\":\"ZkLoginAuth\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"ZkLoginAuth\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title ZkLoginAuth\\n * @dev Simplified contract for verifying user authentication via signatures\\n */\\ncontract ZkLoginAuth {\\n    // Private trusted verifier address\\n    address private immutable trustedVerifier = 0x00AC976b0756EC2dd9935f55e0294C24FCa8DF46;\\n    uint256 public constant TIME_WINDOW = 20 minutes;\\n\\n    event LoginAttempt(\\n        string indexed user,\\n        bool success,\\n        address recoveredSigner,\\n        address trustedVerifier,\\n        bytes32 messageHash,\\n        string message\\n    );\\n    event LoginSuccess(string indexed user, string message);\\n\\n    /**\\n     * @dev Verify user authentication with pre-formatted message components\\n     * @param timestamps Timestamp of the authentication attempt\\n     * @param proofHash Hash of the proof\\n     * @param userAddress Address of the user attempting to log in\\n     * @param signature Signature produced by the trusted verifier\\n     * @return True if authentication is successful\\n     */\\n    function verifyLogin(\\n        string calldata timestamps,\\n        string calldata proofHash,\\n        string calldata userAddress,\\n        bytes calldata signature\\n    ) external returns (string memory) {\\n        uint256 timestamp = stringToUint(timestamps); // Convert string to uint256\\n        // Check if timestamp is valid (not expired)\\n        require(\\n            (block.timestamp > timestamp ? block.timestamp - timestamp : timestamp - block.timestamp) <= TIME_WINDOW,\\n            \\\"Timestamp outside valid window\\\"\\n        );\\n\\n        // Concatenate values like Rust's format!(\\\"{}:{}:{}\\\", ...)\\n        string memory messagee = string(abi.encodePacked(timestamps, \\\":\\\", proofHash, \\\":\\\", userAddress));\\n\\n        // Hash the message using keccak256\\n        bytes32 messageHash = keccak256(bytes(messagee));\\n\\n        // Prefix the hash (mimics ethers.hashMessage)\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash));\\n\\n        // Recover signer from signature\\n        address recoveredSigner = recoverSigner(prefixedHash, signature);\\n\\n        bool success = (recoveredSigner == trustedVerifier);\\n\\n        emit LoginAttempt(userAddress, success, recoveredSigner, trustedVerifier, messageHash, messagee);\\n\\n        if (success) {\\n            // Emit an event that includes both the address and a success message\\n            emit LoginSuccess(userAddress, \\\"success\\\");\\n            return \\\"success\\\";\\n        } else {\\n            return \\\"failure\\\";\\n        }\\n    }\\n\\n    /**\\n     * @dev Recover signer address from signature\\n     * @param _hash Hashed message\\n     * @param _signature Signature bytes\\n     * @return Recovered address\\n     */\\n    function recoverSigner(bytes32 _hash, bytes calldata _signature) internal pure returns (address) {\\n        require(_signature.length == 65, \\\"Invalid signature length\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            // Extract r, s, v from the signature\\n            // IMPORTANT: We need to add 32 to the pointer to skip the length field of the bytes array\\n            r := calldataload(_signature.offset)\\n            s := calldataload(add(_signature.offset, 32))\\n            // For v, we load 32 bytes and then extract the first byte\\n            v := byte(0, calldataload(add(_signature.offset, 64)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but some wallets use 0 or 1\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        return ecrecover(_hash, v, r, s);\\n    }\\n\\n    function stringToUint(string memory s) internal pure returns (uint256) {\\n        bytes memory b = bytes(s);\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            require(b[i] >= 0x30 && b[i] <= 0x39, \\\"Invalid character\\\"); // Ensure only digits\\n            result = result * 10 + (uint256(uint8(b[i])) - 48);\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3b23e5dcb840d53f0fbfe196957250fc1548e882c7da26c2863e7bcfc3bf25a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405272ac976b0756ec2dd9935f55e0294c24fca8df4660805234801561002757600080fd5b5060805161080a61004a600039600081816101d60152610248015261080a6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e60d9311461003b57806375f46a4814610057575b600080fd5b6100446104b081565b6040519081526020015b60405180910390f35b61006a61006536600461057b565b610077565b60405161004e9190610685565b606060006100ba8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061035392505050565b90506104b08142116100d5576100d042836106b5565b6100df565b6100df82426106b5565b11156101325760405162461bcd60e51b815260206004820152601e60248201527f54696d657374616d70206f7574736964652076616c69642077696e646f77000060448201526064015b60405180910390fd5b60008a8a8a8a8a8a60405160200161014f969594939291906106ce565b60405160208183030381529060405290506000818051906020012090506000816040516020016101ab91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60405160208183030381529060405280519060200120905060006101d0828989610451565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161490508a8a60405161021b92919061070c565b60405180910390207fb99ca257d1bf218de184591a703f169d8cc9e84fc8240f9dd51ee2e58929403082847f0000000000000000000000000000000000000000000000000000000000000000888a60405161027a95949392919061071c565b60405180910390a2801561031e578a8a60405161029892919061070c565b60405180910390207f8ab4cb3dd24c6806a54568630a2f7decf036d2e1d5ddfe823c0f584dc801071a6040516102e9906020808252600790820152667375636365737360c81b604082015260600190565b60405180910390a2604051806040016040528060078152602001667375636365737360c81b8152509650505050505050610347565b604051806040016040528060078152602001666661696c75726560c81b81525096505050505050505b98975050505050505050565b60008181805b825181101561044957603060f81b83828151811061037957610379610762565b01602001516001600160f81b031916108015906103ba5750603960f81b8382815181106103a8576103a8610762565b01602001516001600160f81b03191611155b6103fa5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21031b430b930b1ba32b960791b6044820152606401610129565b603083828151811061040e5761040e610762565b0160200151610420919060f81c6106b5565b61042b83600a610778565b610435919061078f565b915080610441816107a2565b915050610359565b509392505050565b6000604182146104a35760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610129565b82356020840135604085013560001a601b8110156104c9576104c6601b826107bb565b90505b60408051600081526020810180835289905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561051c573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b60008083601f84011261054457600080fd5b50813567ffffffffffffffff81111561055c57600080fd5b60208301915083602082850101111561057457600080fd5b9250929050565b6000806000806000806000806080898b03121561059757600080fd5b883567ffffffffffffffff808211156105af57600080fd5b6105bb8c838d01610532565b909a50985060208b01359150808211156105d457600080fd5b6105e08c838d01610532565b909850965060408b01359150808211156105f957600080fd5b6106058c838d01610532565b909650945060608b013591508082111561061e57600080fd5b5061062b8b828c01610532565b999c989b5096995094979396929594505050565b6000815180845260005b8181101561066557602081850181015186830182015201610649565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610698602083018461063f565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156106c8576106c861069f565b92915050565b858782376000868201601d60f91b80825286886001840137600191870191820152838560028301376000930160020192835250909695505050505050565b8183823760009101908152919050565b85151581526001600160a01b038581166020830152841660408201526060810183905260a0608082018190526000906107579083018461063f565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176106c8576106c861069f565b808201808211156106c8576106c861069f565b6000600182016107b4576107b461069f565b5060010190565b60ff81811683821601908111156106c8576106c861069f56fea2646970667358221220df8a966a0e099bbb2ebb591aaca3d389d97aadf006895887b3f69b566637e17b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632e60d9311461003b57806375f46a4814610057575b600080fd5b6100446104b081565b6040519081526020015b60405180910390f35b61006a61006536600461057b565b610077565b60405161004e9190610685565b606060006100ba8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061035392505050565b90506104b08142116100d5576100d042836106b5565b6100df565b6100df82426106b5565b11156101325760405162461bcd60e51b815260206004820152601e60248201527f54696d657374616d70206f7574736964652076616c69642077696e646f77000060448201526064015b60405180910390fd5b60008a8a8a8a8a8a60405160200161014f969594939291906106ce565b60405160208183030381529060405290506000818051906020012090506000816040516020016101ab91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60405160208183030381529060405280519060200120905060006101d0828989610451565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161490508a8a60405161021b92919061070c565b60405180910390207fb99ca257d1bf218de184591a703f169d8cc9e84fc8240f9dd51ee2e58929403082847f0000000000000000000000000000000000000000000000000000000000000000888a60405161027a95949392919061071c565b60405180910390a2801561031e578a8a60405161029892919061070c565b60405180910390207f8ab4cb3dd24c6806a54568630a2f7decf036d2e1d5ddfe823c0f584dc801071a6040516102e9906020808252600790820152667375636365737360c81b604082015260600190565b60405180910390a2604051806040016040528060078152602001667375636365737360c81b8152509650505050505050610347565b604051806040016040528060078152602001666661696c75726560c81b81525096505050505050505b98975050505050505050565b60008181805b825181101561044957603060f81b83828151811061037957610379610762565b01602001516001600160f81b031916108015906103ba5750603960f81b8382815181106103a8576103a8610762565b01602001516001600160f81b03191611155b6103fa5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21031b430b930b1ba32b960791b6044820152606401610129565b603083828151811061040e5761040e610762565b0160200151610420919060f81c6106b5565b61042b83600a610778565b610435919061078f565b915080610441816107a2565b915050610359565b509392505050565b6000604182146104a35760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610129565b82356020840135604085013560001a601b8110156104c9576104c6601b826107bb565b90505b60408051600081526020810180835289905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561051c573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b60008083601f84011261054457600080fd5b50813567ffffffffffffffff81111561055c57600080fd5b60208301915083602082850101111561057457600080fd5b9250929050565b6000806000806000806000806080898b03121561059757600080fd5b883567ffffffffffffffff808211156105af57600080fd5b6105bb8c838d01610532565b909a50985060208b01359150808211156105d457600080fd5b6105e08c838d01610532565b909850965060408b01359150808211156105f957600080fd5b6106058c838d01610532565b909650945060608b013591508082111561061e57600080fd5b5061062b8b828c01610532565b999c989b5096995094979396929594505050565b6000815180845260005b8181101561066557602081850181015186830182015201610649565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610698602083018461063f565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156106c8576106c861069f565b92915050565b858782376000868201601d60f91b80825286886001840137600191870191820152838560028301376000930160020192835250909695505050505050565b8183823760009101908152919050565b85151581526001600160a01b038581166020830152841660408201526060810183905260a0608082018190526000906107579083018461063f565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176106c8576106c861069f565b808201808211156106c8576106c861069f565b6000600182016107b4576107b461069f565b5060010190565b60ff81811683821601908111156106c8576106c861069f56fea2646970667358221220df8a966a0e099bbb2ebb591aaca3d389d97aadf006895887b3f69b566637e17b64736f6c63430008140033",
  "devdoc": {
    "details": "Simplified contract for verifying user authentication via signatures",
    "kind": "dev",
    "methods": {
      "verifyLogin(string,string,string,bytes)": {
        "details": "Verify user authentication with pre-formatted message components",
        "params": {
          "proofHash": "Hash of the proof",
          "signature": "Signature produced by the trusted verifier",
          "timestamps": "Timestamp of the authentication attempt",
          "userAddress": "Address of the user attempting to log in"
        },
        "returns": {
          "_0": "True if authentication is successful"
        }
      }
    },
    "title": "ZkLoginAuth",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}